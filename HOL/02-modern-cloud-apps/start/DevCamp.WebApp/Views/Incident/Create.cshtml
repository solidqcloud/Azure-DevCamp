@model DevCamp.WebApp.ViewModels.IncidentViewModel

@{
    ViewBag.Title = "Report an Outage";
}

<div class="container">

    <h1>@ViewBag.Title</h1>

    <p>Welcome to the CP&amp;L outage reporting tool. From here you can view all reported outages via the dashboard screen, or report a new outage. Our technicians will address outages as soon as possible.</p>

    @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        <div class="form-vertical">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <!-- Left Column -->
            <div class="col-sm-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.OutageType, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.OutageType, DevCamp.WebApp.ViewModels.IncidentViewModel.GetOutageTypes().AsQueryable(), "Select an outage type", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.OutageType, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
                    @Html.TextAreaFor(model => model.Description, 4, 55, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Street, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Street, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Street, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                </div>

                <div class="row">

                    <div class="col-xs-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label" })
                            @Html.DropDownListFor(model => model.State, DevCamp.WebApp.ViewModels.IncidentViewModel.GetStates().AsQueryable(), "Select", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-xs-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.IsEmergency, htmlAttributes: new { @class = "control-label" })
                    @Html.CheckBoxFor(model => Model.IsEmergency, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.IsEmergency, "", new { @class = "text-danger" })
                </div>
                <input type="submit" value="Create" class="btn btn-default" />
                <button type="button" class="btn btn-danger">Cancel</button>

            </div>

            <!-- Right Column -->
            <div class="col-sm-6">
                <div class="form-group well well-lg">
                    @Html.LabelFor(model => model.ImageFile)
                    @Html.TextBoxFor(model => model.ImageFile, new { type = "file", @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ImageFile)
                </div>
            </div>
        </div>
    }
</div>