// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace IncidentAPI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for IncidentOperations.
    /// </summary>
    public static partial class IncidentOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='incidentId'>
            /// </param>
            public static object GetById(this IIncidentOperations operations, string incidentId)
            {
                return Task.Factory.StartNew(s => ((IIncidentOperations)s).GetByIdAsync(incidentId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='incidentId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByIdAsync(this IIncidentOperations operations, string incidentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(incidentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetAllIncidents(this IIncidentOperations operations)
            {
                return Task.Factory.StartNew(s => ((IIncidentOperations)s).GetAllIncidentsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllIncidentsAsync(this IIncidentOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllIncidentsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='incidentId'>
            /// </param>
            /// <param name='newIncident'>
            /// </param>
            public static object UpdateIncident(this IIncidentOperations operations, string incidentId, Incident newIncident)
            {
                return Task.Factory.StartNew(s => ((IIncidentOperations)s).UpdateIncidentAsync(incidentId, newIncident), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='incidentId'>
            /// </param>
            /// <param name='newIncident'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateIncidentAsync(this IIncidentOperations operations, string incidentId, Incident newIncident, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateIncidentWithHttpMessagesAsync(incidentId, newIncident, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='newIncident'>
            /// </param>
            public static object CreateIncident(this IIncidentOperations operations, Incident newIncident)
            {
                return Task.Factory.StartNew(s => ((IIncidentOperations)s).CreateIncidentAsync(newIncident), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='newIncident'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateIncidentAsync(this IIncidentOperations operations, Incident newIncident, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateIncidentWithHttpMessagesAsync(newIncident, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static int? GetIncidentCount(this IIncidentOperations operations)
            {
                return Task.Factory.StartNew(s => ((IIncidentOperations)s).GetIncidentCountAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> GetIncidentCountAsync(this IIncidentOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIncidentCountWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static int? GetAllIncidentsCount(this IIncidentOperations operations)
            {
                return Task.Factory.StartNew(s => ((IIncidentOperations)s).GetAllIncidentsCountAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> GetAllIncidentsCountAsync(this IIncidentOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllIncidentsCountWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object ClearData(this IIncidentOperations operations)
            {
                return Task.Factory.StartNew(s => ((IIncidentOperations)s).ClearDataAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ClearDataAsync(this IIncidentOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClearDataWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object SampleData(this IIncidentOperations operations)
            {
                return Task.Factory.StartNew(s => ((IIncidentOperations)s).SampleDataAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SampleDataAsync(this IIncidentOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SampleDataWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object FakeData(this IIncidentOperations operations)
            {
                return Task.Factory.StartNew(s => ((IIncidentOperations)s).FakeDataAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> FakeDataAsync(this IIncidentOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FakeDataWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
